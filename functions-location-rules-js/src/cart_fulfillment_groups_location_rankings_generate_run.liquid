{%- if flavor contains "vanilla-js" -%}
// @ts-check

/**
 * @typedef {import("../generated/api").CartFulfillmentGroupsLocationRankingsGenerateRunInput} CartFulfillmentGroupsLocationRankingsGenerateRunInput
 * @typedef {import("../generated/api").CartFulfillmentGroupsLocationRankingsGenerateRunResult} CartFulfillmentGroupsLocationRankingsGenerateRunResult
 */

/**
 * @param {CartFulfillmentGroupsLocationRankingsGenerateRunInput} input
 * @returns {CartFulfillmentGroupsLocationRankingsGenerateRunResult}
 */
export function cartFulfillmentGroupsLocationRankingsGenerateRun(input) {
  const operations = input.fulfillmentGroups.map((group) => {
    const rankings = group.inventoryLocationHandles?.map((inventoryLocationHandle) => ({
      locationHandle: inventoryLocationHandle,
      rank: 0,
    })) || [];

    return {
      fulfillmentGroupLocationRankingAdd: {
        fulfillmentGroupHandle: group.handle,
        rankings,
      },
    };
  });

  return {operations};
};
{%- elsif flavor contains "typescript" -%}
import type {
  CartFulfillmentGroupsLocationRankingsGenerateRunInput,
  CartFulfillmentGroupsLocationRankingsGenerateRunResult,
  Operation,
  RankedLocation,
} from "../generated/api";

export function cartFulfillmentGroupsLocationRankingsGenerateRun(input: CartFulfillmentGroupsLocationRankingsGenerateRunInput): CartFulfillmentGroupsLocationRankingsGenerateRunResult {
  const operations: Operation[] = input.fulfillmentGroups.map((group) => {
    const rankings: RankedLocation[] = group.inventoryLocationHandles?.map(
      (inventoryLocationHandle) => ({
        locationHandle: inventoryLocationHandle,
        rank: 0,
      }),
    ) || [];

    return {
      fulfillmentGroupLocationRankingAdd: {
        fulfillmentGroupHandle: group.handle,
        rankings,
      },
    };
  });

  return {operations};
};
{%- endif -%}

{%- if flavor contains "react" -%}
import {useEffect, useState} from 'react';
import {
  reactExtension,
  useApi,
  AppAction,
  Button,
} from '@shopify/ui-extensions-react/admin';

// The target used here must match the target used in the extension's toml file (./shopify.ui.extension.toml)
{% if flavor contains "typescript" %}
export default reactExtension<any>('admin.product.item.action', () => <App />);
{% else %}
export default reactExtension('admin.product.item.action', () => <App />);
{% endif %}
function App() {
  {% if flavor contains "typescript" %}
  const {extensionPoint, i18n, close, data} = useApi() as any;
  {% else %}
  const {extensionPoint, i18n, close, data} = useApi();
  {% endif %}
  const [productTitle, setProductTitle] = useState('');

  useEffect(() => {
    (async function getProductInfo() {
      const getProductQuery = {
        query: `query Product($id: ID!) {
          product(id: $id) {
            title
          }
        }`,
        variables: {id: data.selected[0].id},
      };

      const res = await fetch("shopify:admin/api/graphql.json", {
        method: "POST",
        body: JSON.stringify(getProductQuery),
      });

      if (!res.ok) {
        console.error('Network error');
      }

      const productData = await res.json();
      setProductTitle(productData.data.product.title);
    })();
  }, []);

  return (
    <AppAction
      title="{{ name }}"
      primaryAction={
        <Button
          onPress={() => {
            console.log('saving');
            close();
          }}
        >
          Save
        </Button>
      }
      secondaryAction={
        <Button
          onPress={() => {
            console.log('closing');
            close();
          }}
        >
          Close
        </Button>
      }
    >
      {i18n.translate('welcome', {extensionPoint})}
      Current product: {productTitle}
    </AppAction>
  );
}

{%- else -%}
import { extend, AppAction, Button } from "@shopify/ui-extensions/admin";

extend("admin.product.item.action", (root, { extensionPoint, i18n, close, data }) => {
  let productTitle = '';
  getProductInfo(data).then((title) => {
    productTitle = title;
  });

  root.appendChild(
    root.createComponent(
      AppAction,
      {
        title: "{{ name }}",
        primaryAction: root.createComponent(Button, {
          onPress: () => {
            console.log("saving");
            close();
          },
        }, 'Save'),
        secondaryAction: root.createComponent(Button, {
          onPress: () => {
            console.log("closing");
            close();
          },
        }, 'Close')
      },
      `${i18n.translate('welcome', {extensionPoint})}\nCurrent product: ${productTitle}`
    )
  );
});

async function getProductInfo(data) {
  const getProductQuery = {
    query: `query Product($id: ID!) {
      product(id: $id) {
        title
      }
    }`,
    variables: {id: data.selected[0].id},
  };

  const res = await fetch("shopify:admin/api/graphql.json", {
    method: "POST",
    body: JSON.stringify(getProductQuery),
  });

  if (!res.ok) {
    console.error('Network error');
  }

  const productData = await res.json();
  return productData.data.product.title;
};
{%- endif -%}

{%- if flavor contains "typescript" -%}
import {render} from 'preact';
import type {ShopifyGlobal, BlockExtensionApi} from '@shopify/ui-extensions/admin';

// Temp hack for global
const shopify: ShopifyGlobal = {...Reflect.get(globalThis, 'shopify')};

const TARGET = 'admin.product-details.block.render';

shopify.extend(TARGET, (root, api) => {
  // for now, we are grotesquely manually merging extension APIs into the global:
  Object.defineProperties(shopify, Object.getOwnPropertyDescriptors(api));
  render(<Extension />, root);
});

function Extension() {
  const {i18n, data, extension: {target}} = shopify as unknown as BlockExtensionApi<typeof TARGET>;

  console.log({data});

  return (
    <s-admin-block title="My Block Extension">
      <s-stack direction="block">
        <s-text type="strong">{i18n.translate('welcome', {target})}</s-text>
      </s-stack>
    </s-admin-block>
  );
}
{%- else -%}
import {render} from 'preact';

// Temp hack for global
const shopify = {...Reflect.get(globalThis, 'shopify')};

const TARGET = 'admin.product-details.block.render';

shopify.extend(TARGET, (root, api) => {
  // for now, we are grotesquely manually merging extension APIs into the global:
  Object.defineProperties(shopify, Object.getOwnPropertyDescriptors(api));

  // log out the API to play around with:
  // console.log(shopify);
  render(<Extension />, root);
});

function Extension() {
  const {i18n, data, extension: {target}} = shopify;

  console.log({data});

  return (
    <s-admin-block title="My Block Extension">
      <s-stack direction="block">
        <s-text type="strong">{i18n.translate('welcome', {target})}</s-text>
      </s-stack>
    </s-admin-block>
  );
}
{%- endif -%}
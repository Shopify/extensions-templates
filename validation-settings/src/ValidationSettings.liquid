{%- if flavor contains "preact" -%}
import "@shopify/ui-extensions/preact";
import { render } from "preact";
import { useState } from "preact/hooks";

export default async () => {
  const existingDefinition = await getMetafieldDefinition();
  if (!existingDefinition) {
    // Create a metafield definition for persistence if no pre-existing definition exists
    const metafieldDefinition = await createMetafieldDefinition();

    if (!metafieldDefinition) {
      throw new Error("Failed to create metafield definition");
    }
  }

  const configuration = JSON.parse(
    shopify.data.validation?.metafields?.[0]?.value ?? "{}"
  );

  const products = await getProducts();

  render(
    <Extension configuration={configuration} products={products} />,
    document.body
  );
};

function Extension({ configuration, products }) {
  const [variantLimits, setVariantLimits] = useState(configuration);
  const [errors, setErrors] = useState([]);

  if (!products || products.length === 0) {
    return <s-text>No products found.</s-text>;
  }

  const shouldShowVariants = (variants) => {
    return (
      variants.length > 1 ||
      (variants.length === 1 && variants[0].title !== "Default Title")
    );
  };

  const applyMetafieldUpdate = async (limits) => {
    const result = await shopify.applyMetafieldChange({
      type: "updateMetafield",
      namespace: "$app:product-limits",
      key: "product-limits-values",
      value: JSON.stringify(limits),
    });

    if (result.type === "error") {
      setErrors([result.message]);
    }
  };

  const updateVariantLimit = async (variantId, value) => {
    setErrors([]);

    const newLimits = {
      ...variantLimits,
      [variantId]: value,
    };

    setVariantLimits(newLimits);

    await applyMetafieldUpdate(newLimits);
  };

  // Flatten products and variants for table display with better grouping
  const tableRows = products.flatMap((product) => {
    if (shouldShowVariants(product.variants)) {
      return product.variants.map((variant, index) => ({
        product,
        variant,
        isFirstVariant: index === 0,
        variantCount: product.variants.length,
      }));
    } else {
      return [
        {
          product,
          variant: { id: product.variants[0].id, title: "Default" },
          isFirstVariant: true,
          variantCount: 1,
        },
      ];
    }
  });

  return (
    <s-function-settings onSave={() => applyMetafieldUpdate(variantLimits)}>
      <ErrorBanner errors={errors} />
      <s-table variant="auto">
        <s-table-header-row>
          <s-table-header listSlot="primary">Product</s-table-header>
          <s-table-header>Variant</s-table-header>
          <s-table-header>Limit</s-table-header>
        </s-table-header-row>
        <s-table-body>
          {tableRows.map((row) => (
            <s-table-row key={`${row.product.title}-${row.variant.id}`}>
              <s-table-cell>
                {row.isFirstVariant && (
                  <s-stack direction="inline" gap="small" alignItems="center">
                    <s-thumbnail
                      src={row.product.featuredImageUrl}
                      size="small"
                    />
                    <s-stack gap="none">
                      <s-text>{row.product.title}</s-text>
                      {row.variantCount > 1 && (
                        <s-text tone="neutral">
                          {row.variantCount} variants
                        </s-text>
                      )}
                    </s-stack>
                  </s-stack>
                )}
              </s-table-cell>
              <s-table-cell>
                <s-text>{row.variant.title}</s-text>
              </s-table-cell>
              <s-table-cell>
                <VariantNumberField
                  labelValue={`${row.product.title}, ${row.variant.title}`}
                  value={variantLimits[row.variant.id]}
                  name={row.variant.id}
                  onChange={(value) =>
                    updateVariantLimit(row.variant.id, value)
                  }
                />
              </s-table-cell>
            </s-table-row>
          ))}
        </s-table-body>
      </s-table>
    </s-function-settings>
  );
}

function ErrorBanner({ errors }) {
  if (errors.length === 0) return null;
  return (
    <s-stack gap="base">
      {errors.map((error, i) => (
        <s-banner key={i} heading="Error" tone="critical">
          {error}
        </s-banner>
      ))}
    </s-stack>
  );
}

function VariantNumberField({ labelValue, value, onChange, name }) {
  return (
    <s-number-field
      labelAccessibilityVisibility="exclusive"
      placeholder="Set limit"
      value={value || ""}
      name={`${name}-number`}
      label={`Set a limit for ${labelValue}`}
      min={0}
      onChange={(event) => onChange(event.target.value)}
    />
  );
}

async function getMetafieldDefinition() {
  const query = `#graphql
    query GetMetafieldDefinition {
      metafieldDefinitions(first: 1, ownerType: VALIDATION, namespace: "${METAFIELD_NAMESPACE}", key: "${METAFIELD_KEY}") {
        nodes {
          id
        }
      }
    }
  `;

  const result = await shopify.query(query);

  return result?.data?.metafieldDefinitions?.nodes[0];
}

const METAFIELD_NAMESPACE = "$app:product-limits";
const METAFIELD_KEY = "product-limits-values";

async function createMetafieldDefinition() {
  const definition = {
    access: {
      admin: "MERCHANT_READ_WRITE",
    },
    key: METAFIELD_KEY,
    name: "Validation Configuration",
    namespace: METAFIELD_NAMESPACE,
    ownerType: "VALIDATION",
    type: "json",
  };

  const query = `#graphql
    mutation CreateMetafieldDefinition($definition: MetafieldDefinitionInput!) {
      metafieldDefinitionCreate(definition: $definition) {
        createdDefinition {
            id
          }
        }
      }
  `;

  const variables = { definition };
  const result = await shopify.query(query, { variables });

  return result?.data?.metafieldDefinitionCreate?.createdDefinition;
}

async function getProducts() {
  const query = `#graphql
  query FetchProducts {
    products(first: 8) {
      nodes {
        title
        featuredMedia {
          preview {
            image {
              url
            }
          }
        }
        variants(first: 4) {
          nodes {
            id
            title
            image {
              url
            }
          }
        }
      }
    }
  }`;

  const result = await shopify.query(query);

  return result?.data?.products.nodes.map(
    ({ title, featuredMedia, variants }) => {
      return {
        title,
        featuredImageUrl: featuredMedia?.preview?.image.url,
        variants: variants.nodes.map((variant) => ({
          title: variant.title,
          id: variant.id,
          imageUrl: variant?.image?.url,
        })),
      };
    }
  );
}
{%- elsif flavor contains 'react' -%}
import React, { useState } from "react";
import {
  reactExtension,
  useApi,
  Text,
  Box,
  FunctionSettings,
  Section,
  NumberField,
  BlockStack,
  Banner,
  InlineStack,
  Image,
} from "@shopify/ui-extensions-react/admin";

const TARGET = "admin.settings.validation.render";

export default reactExtension(TARGET, async (api) => {
  const existingDefinition = await getMetafieldDefinition(api.query);
  if (!existingDefinition) {
    // Create a metafield definition for persistence if no pre-existing definition exists
    const metafieldDefinition = await createMetafieldDefinition(api.query);

    if (!metafieldDefinition) {
      throw new Error("Failed to create metafield definition");
    }
  }

  // Read existing persisted data about product limits from the associated metafield
  const configuration = JSON.parse(
    api.data.validation?.metafields?.[0]?.value ?? "{}",
  );

  // Query product data needed to render the settings UI
  const products = await getProducts(api.query);

  return (
    <ValidationSettings configuration={configuration} products={products} />
  );
});

function ValidationSettings({ configuration, products }) {
  const [errors, setErrors] = useState([]);
  // State to keep track of product limit settings, initialized to any persisted metafield value
  const [settings, setSettings] = useState(
    createSettings(products, configuration),
  );

  const { applyMetafieldChange } = useApi(TARGET);

  const onError = (error) => {
    setErrors(errors.map((e) => e.message));
  };

  const onChange = async (variant, value) => {
    setErrors([]);
    const newSettings = {
      ...settings,
      [variant.id]: Number(value),
    };
    setSettings(newSettings);

    // On input change, commit updated product variant limits to memory.
    // Caution: the changes are only persisted on save!
    const result = await applyMetafieldChange({
      type: "updateMetafield",
      namespace: "$app:product-limits",
      key: "product-limits-values",
      value: JSON.stringify(newSettings),
    });

    if (result.type === "error") {
      setErrors([result.message]);
    }
  };

  return (
    // Note: FunctionSettings must be rendered for the host to receive metafield updates
    <FunctionSettings onError={onError}>
      <ErrorBanner errors={errors} />
      <ProductQuantitySettings
        products={products}
        settings={settings}
        onChange={onChange}
      />
    </FunctionSettings>
  );
}

function ProductQuantitySettings({ products, settings, onChange }) {
  function Header() {
    return (
      <InlineStack>
        <Box minInlineSize="5%" />
        <Box minInlineSize="5%">
          <Text fontWeight="bold">Variant Name</Text>
        </Box>
        <Box minInlineSize="50%">
          <Text fontWeight="bold">Limit</Text>
        </Box>
      </InlineStack>
    );
  }

  // Render table of product variants and inputs to assign limits
  return products.map(({ title, variants }) => (
    <Section heading={title} key={title}>
      <BlockStack paddingBlock="large">
        <Header />
        {variants.map((variant) => {
          const limit = settings[variant.id];
          return (
            <InlineStack columnGap="none" key={variant.id}>
              <Box minInlineSize="5%">
                {variant.imageUrl ? (
                  <Image alt={variant.title} src={variant.imageUrl} />
                ) : (
                  <Text>No image</Text>
                )}
              </Box>
              <Box minInlineSize="5%">
                <Text>{variant.title}</Text>
              </Box>
              <Box minInlineSize="50%">
                <NumberField
                  value={limit}
                  min={0}
                  max={99}
                  label="Set a limit"
                  defaultValue={String(limit)}
                  onChange={(value) => onChange(variant, value)}
                ></NumberField>
              </Box>
            </InlineStack>
          );
        })}
      </BlockStack>
    </Section>
  ));
}

function ErrorBanner({ errors }) {
  if (errors.length === 0) return null;

  return (
    <Box paddingBlockEnd="large">
      {errors.map((error, i) => (
        <Banner key={i} title="Errors were encountered" tone="critical">
          {error}
        </Banner>
      ))}
    </Box>
  );
}

async function getProducts(adminApiQuery) {
  const query = `#graphql
  query FetchProducts {
    products(first: 5) {
      nodes {
        title
        variants(first: 5) {
          nodes {
            id
            title
            image {
              url
            }
          }
        }
      }
    }
  }`;

  const result = await adminApiQuery(query);

  return result?.data?.products.nodes.map(({ title, variants }) => {
    return {
      title,
      variants: variants.nodes.map((variant) => ({
        title: variant.title,
        id: variant.id,
        imageUrl: variant?.image?.url,
      })),
    };
  });
}

const METAFIELD_NAMESPACE = "$app:product-limits";
const METAFIELD_KEY = "product-limits-values";

async function getMetafieldDefinition(adminApiQuery) {
  const query = `#graphql
    query GetMetafieldDefinition {
      metafieldDefinitions(first: 1, ownerType: VALIDATION, namespace: "${METAFIELD_NAMESPACE}", key: "${METAFIELD_KEY}") {
        nodes {
          id
        }
      }
    }
  `;

  const result = await adminApiQuery(query);

  return result?.data?.metafieldDefinitions?.nodes[0];
}

async function createMetafieldDefinition(adminApiQuery) {
  const definition = {
    access: {
      admin: "MERCHANT_READ_WRITE",
    },
    key: METAFIELD_KEY,
    name: "Validation Configuration",
    namespace: METAFIELD_NAMESPACE,
    ownerType: "VALIDATION",
    type: "json",
  };

  const query = `#graphql
    mutation CreateMetafieldDefinition($definition: MetafieldDefinitionInput!) {
      metafieldDefinitionCreate(definition: $definition) {
        createdDefinition {
            id
          }
        }
      }
  `;

  const variables = { definition };
  const result = await adminApiQuery(query, { variables });

  return result?.data?.metafieldDefinitionCreate?.createdDefinition;
}

function createSettings(products, configuration) {
  const settings = {};

  products.forEach(({ variants }) => {
    variants.forEach(({ id }) => {
      // Read existing product limits from metafield
      const limit = configuration[id];

      if (limit) {
        settings[id] = limit;
      }
    });
  });

  return settings;
}

{%- elsif flavor contains 'typescript-react' -%}
import React, { useState } from "react";
import {
  reactExtension,
  useApi,
  Text,
  Box,
  FunctionSettings,
  Section,
  NumberField,
  BlockStack,
  Banner,
  InlineStack,
  Image,
  type FunctionSettingsError,
} from "@shopify/ui-extensions-react/admin";
import { type ValidationSettingsApi } from "@shopify/ui-extensions/admin";

const TARGET = "admin.settings.validation.render";

export default reactExtension(
  TARGET,
  async (api: ValidationSettingsApi<typeof TARGET>) => {
    const existingDefinition = await getMetafieldDefinition(api.query);
    if (!existingDefinition) {
      // Create a metafield definition for persistence if no pre-existing definition exists
      const metafieldDefinition = await createMetafieldDefinition(api.query);

      if (!metafieldDefinition) {
        throw new Error("Failed to create metafield definition");
      }
    }

    // Read existing persisted data about product limits from the associated metafield
    const configuration = JSON.parse(
      api.data.validation?.metafields?.[0]?.value ?? "{}",
    );

    // Query product data needed to render the settings UI
    const products = await getProducts(api.query);

    return (
      <ValidationSettings configuration={configuration} products={products} />
    );
  },
);

function ValidationSettings({
  configuration,
  products,
}: {
  configuration: Object;
  products: Product[];
}) {
  const [errors, setErrors] = useState<string[]>([]);
  // State to keep track of product limit settings, initialized to any persisted metafield value
  const [settings, setSettings] = useState<Record<string, number>>(
    createSettings(products, configuration),
  );

  const { applyMetafieldChange } = useApi(TARGET);

  const onError = (errors: FunctionSettingsError[]) => {
    setErrors(errors.map((e) => e.message));
  };

  const onChange = async (variant: ProductVariant, value: number) => {
    setErrors([]);
    const newSettings = {
      ...settings,
      [variant.id]: Number(value),
    };
    setSettings(newSettings);

    // On input change, commit updated product variant limits to memory.
    // Caution: the changes are only persisted on save!
    const result = await applyMetafieldChange({
      type: "updateMetafield",
      namespace: "$app:product-limits",
      key: "product-limits-values",
      value: JSON.stringify(newSettings),
    });

    if (result.type === "error") {
      setErrors([result.message]);
    }
  };

  return (
    // Note: FunctionSettings must be rendered for the host to receive metafield updates
    <FunctionSettings onError={onError}>
      <ErrorBanner errors={errors} />
      <ProductQuantitySettings
        products={products}
        settings={settings}
        onChange={onChange}
      />
    </FunctionSettings>
  );
}

function ProductQuantitySettings({
  products,
  settings,
  onChange,
}: {
  products: Product[];
  settings: Record<string, number>;
  onChange: (variant: ProductVariant, value: number) => Promise<void>;
}) {
  function Header() {
    return (
      <InlineStack>
        <Box minInlineSize="5%" />
        <Box minInlineSize="5%">
          <Text fontWeight="bold">Variant Name</Text>
        </Box>
        <Box minInlineSize="50%">
          <Text fontWeight="bold">Limit</Text>
        </Box>
      </InlineStack>
    );
  }

  // Render table of product variants and inputs to assign limits
  return products.map(({ title, variants }) => (
    <Section heading={title} key={title}>
      <BlockStack paddingBlock="large">
        <Header />
        {variants.map((variant) => {
          const limit = settings[variant.id];
          return (
            <InlineStack columnGap="none" key={variant.id}>
              <Box minInlineSize="5%">
                {variant.imageUrl ? (
                  <Image alt={variant.title} src={variant.imageUrl} />
                ) : (
                  <Text>No image</Text>
                )}
              </Box>
              <Box minInlineSize="5%">
                <Text>{variant.title}</Text>
              </Box>
              <Box minInlineSize="50%">
                <NumberField
                  value={limit}
                  min={0}
                  max={99}
                  label="Set a limit"
                  defaultValue={String(limit)}
                  onChange={(value) => onChange(variant, value)}
                ></NumberField>
              </Box>
            </InlineStack>
          );
        })}
      </BlockStack>
    </Section>
  ));
}

function ErrorBanner({ errors }: { errors: string[] }) {
  if (errors.length === 0) return null;

  return (
    <Box paddingBlockEnd="large">
      {errors.map((error, i) => (
        <Banner key={i} title="Errors were encountered" tone="critical">
          {error}
        </Banner>
      ))}
    </Box>
  );
}

type Product = {
  title: string;
  variants: ProductVariant[];
};

type ProductVariant = {
  id: string;
  title: string;
  imageUrl?: string;
};

async function getProducts(
  adminApiQuery: ValidationSettingsApi<typeof TARGET>["query"],
): Promise<Product[]> {
  const query = `#graphql
  query FetchProducts {
    products(first: 5) {
      nodes {
        title
        variants(first: 5) {
          nodes {
            id
            title
            image {
              url
            }
          }
        }
      }
    }
  }`;

  type ProductQueryData = {
    products: {
      nodes: Array<{
        title: string;
        variants: {
          nodes: Array<{
            id: string;
            title: string;
            image?: {
              url: string;
            };
          }>;
        };
      }>;
    };
  };

  const results = await adminApiQuery<ProductQueryData>(query);

  return (
    results?.data?.products.nodes.map(({ title, variants }) => {
      return {
        title,
        variants: variants.nodes.map((variant) => ({
          title: variant.title,
          id: variant.id,
          imageUrl: variant?.image?.url,
        })),
      };
    }) ?? []
  );
}

const METAFIELD_NAMESPACE = "$app:product-limits";
const METAFIELD_KEY = "product-limits-values";

async function getMetafieldDefinition(
  adminApiQuery: ValidationSettingsApi<typeof TARGET>["query"],
) {
  const query = `#graphql
    query GetMetafieldDefinition {
      metafieldDefinitions(first: 1, ownerType: VALIDATION, namespace: "${METAFIELD_NAMESPACE}", key: "${METAFIELD_KEY}") {
        nodes {
          id
        }
      }
    }
  `;

  type MetafieldDefinitionsQueryData = {
    metafieldDefinitions: {
      nodes: Array<{
        id: string;
      }>;
    };
  };

  const result = await adminApiQuery<MetafieldDefinitionsQueryData>(query);

  return result?.data?.metafieldDefinitions?.nodes[0];
}

async function createMetafieldDefinition(
  adminApiQuery: ValidationSettingsApi<typeof TARGET>["query"],
) {
  const definition = {
    access: {
      admin: "MERCHANT_READ_WRITE",
    },
    key: METAFIELD_KEY,
    name: "Validation Configuration",
    namespace: METAFIELD_NAMESPACE,
    ownerType: "VALIDATION",
    type: "json",
  };

  const query = `#graphql
    mutation CreateMetafieldDefinition($definition: MetafieldDefinitionInput!) {
      metafieldDefinitionCreate(definition: $definition) {
        createdDefinition {
            id
          }
        }
      }
  `;

  type MetafieldDefinitionCreateData = {
    metafieldDefinitionCreate: {
      createdDefinition?: {
        id: string;
      };
    };
  };

  const variables = { definition };
  const result = await adminApiQuery<MetafieldDefinitionCreateData>(query, {
    variables,
  });

  return result?.data?.metafieldDefinitionCreate?.createdDefinition;
}

function createSettings(
  products: Product[],
  configuration: Object,
): Record<string, number> {
  const settings = {};

  products.forEach(({ variants }) => {
    variants.forEach(({ id }) => {
      // Read existing product limits from metafield
      const limit = configuration[id];

      if (limit) {
        settings[id] = limit;
      }
    });
  });

  return settings;
}

{%- elsif flavor contains 'typescript' -%}
import { type RemoteRoot } from "@remote-ui/core";
import {
  extend,
  Text,
  Box,
  FunctionSettings,
  Section,
  NumberField,
  BlockStack,
  Banner,
  InlineStack,
  Image,
  type ValidationSettingsApi,
  type FunctionSettingsError,
} from "@shopify/ui-extensions/admin";

const TARGET = "admin.settings.validation.render";

export default extend(
  TARGET,
  async (root: RemoteRoot, api: ValidationSettingsApi<typeof TARGET>) => {
    const existingDefinition = await getMetafieldDefinition(api.query);
    if (!existingDefinition) {
      // Create a metafield definition for persistence if no pre-existing definition exists
      const metafieldDefinition = await createMetafieldDefinition(api.query);

      if (!metafieldDefinition) {
        throw new Error("Failed to create metafield definition");
      }
    }

    // Read existing persisted data about product limits from the associated metafield
    const configuration = JSON.parse(
      api.data.validation?.metafields?.[0]?.value ?? "{}",
    );

    // Query product data needed to render the settings UI
    const products = await getProducts(api.query);

    renderValidationSettings(root, configuration, products, api);
  },
);

function renderValidationSettings(
  root: RemoteRoot,
  configuration: Object,
  products: Product[],
  api: ValidationSettingsApi<typeof TARGET>,
) {
  let errors: string[] = [];
  // State to keep track of product limit settings, initialized to any persisted metafield value
  let settings = createSettings(products, configuration);

  const onError = (newErrors: FunctionSettingsError[]) => {
    errors = newErrors.map((e) => e.message);
    renderContent();
  };

  const onChange = async (variant: ProductVariant, value: number) => {
    errors = [];
    const newSettings = {
      ...settings,
      [variant.id]: Number(value),
    };
    settings = newSettings;

    // On input change, commit updated product variant limits to memory.
    // Caution: the changes are only persisted on save!
    const result = await api.applyMetafieldChange({
      type: "updateMetafield",
      namespace: "$app:product-limits",
      key: "product-limits-values",
      value: JSON.stringify(newSettings),
    });

    if (result.type === "error") {
      errors = [result.message];
      renderContent();
    }
  };

  const renderErrors = (errors: string[], root: RemoteRoot) => {
    if (!errors.length) {
      return [];
    }

    return errors.map((error, i) =>
      root.createComponent(
        Banner,
        {
          title: "Errors were encountered",
          tone: "critical",
        },
        root.createComponent(Text, {}, error),
      ),
    );
  };

  const renderContent = () => {
    return root.append(
      root.createComponent(
        // Note: FunctionSettings must be rendered for the host to receive metafield updates
        FunctionSettings,
        { onError },
        ...renderErrors(errors, root),
        ...products.map((product) =>
          renderProductQuantitySettings(root, product, settings, onChange),
        ),
      ),
    );
  };

  renderContent();
}

function renderProductQuantitySettings(
  root: RemoteRoot,
  product: Product,
  settings: Record<string, number>,
  onChange: (variant: ProductVariant, value: number) => Promise<void>,
) {
  const heading = root.createComponent(
    InlineStack,
    {},
    root.createComponent(Box, { minInlineSize: "5%" }),
    root.createComponent(
      Box,
      { minInlineSize: "5%" },
      root.createComponent(Text, { fontWeight: "bold" }, "Variant Name"),
    ),
    root.createComponent(
      Box,
      { minInlineSize: "50%" },
      root.createComponent(Text, { fontWeight: "bold" }, "Limit"),
    ),
  );

  const renderVariant = (
    variant: ProductVariant,
    settings: Record<string, number>,
    root: RemoteRoot,
  ) => {
    const limit = settings[variant.id];

    return root.createComponent(
      InlineStack,
      { columnGap: "none" },
      root.createComponent(
        Box,
        { minInlineSize: "5%" },
        variant.imageUrl
          ? root.createComponent(Image, {
              source: variant.imageUrl,
              alt: variant.title,
            })
          : null,
      ),
      root.createComponent(
        Box,
        { minInlineSize: "5%" },
        root.createComponent(Text, {}, variant.title),
      ),
      root.createComponent(
        Box,
        { minInlineSize: "50%" },
        root.createComponent(NumberField, {
          label: "Set a limit",
          value: limit,
          min: 0,
          max: 99,
          defaultValue: String(limit),
          onChange: (value: number) => onChange(variant, value),
        }),
      ),
    );
  };

  // Render table of product variants and inputs to assign limits
  return root.createComponent(
    Section,
    { heading: product.title },
    root.createComponent(
      BlockStack,
      { paddingBlock: "large" },
      heading,
      ...product.variants.map((variant) =>
        renderVariant(variant, settings, root),
      ),
    ),
  );
}

type Product = {
  title: string;
  variants: ProductVariant[];
};

type ProductVariant = {
  id: string;
  title: string;
  imageUrl?: string;
};

async function getProducts(
  adminApiQuery: ValidationSettingsApi<typeof TARGET>["query"],
): Promise<Product[]> {
  const query = `#graphql
  query FetchProducts {
    products(first: 5) {
      nodes {
        title
        variants(first: 5) {
          nodes {
            id
            title
            image {
              url
            }
          }
        }
      }
    }
  }`;

  type ProductQueryData = {
    products: {
      nodes: Array<{
        title: string;
        variants: {
          nodes: Array<{
            id: string;
            title: string;
            image?: {
              url: string;
            };
          }>;
        };
      }>;
    };
  };

  const result = await adminApiQuery<ProductQueryData>(query);

  return (
    result?.data?.products.nodes.map(({ title, variants }) => {
      return {
        title,
        variants: variants.nodes.map((variant) => ({
          title: variant.title,
          id: variant.id,
          imageUrl: variant?.image?.url,
        })),
      };
    }) ?? []
  );
}

const METAFIELD_NAMESPACE = "$app:product-limits";
const METAFIELD_KEY = "product-limits-values";

async function getMetafieldDefinition(
  adminApiQuery: ValidationSettingsApi<typeof TARGET>["query"],
) {
  const query = `#graphql
    query GetMetafieldDefinition {
      metafieldDefinitions(first: 1, ownerType: VALIDATION, namespace: "${METAFIELD_NAMESPACE}", key: "${METAFIELD_KEY}") {
        nodes {
          id
        }
      }
    }
  `;

  type MetafieldDefinitionsQueryData = {
    metafieldDefinitions: {
      nodes: Array<{
        id: string;
      }>;
    };
  };

  const result = await adminApiQuery<MetafieldDefinitionsQueryData>(query);

  return result?.data?.metafieldDefinitions?.nodes[0];
}

async function createMetafieldDefinition(
  adminApiQuery: ValidationSettingsApi<typeof TARGET>["query"],
) {
  const definition = {
    access: {
      admin: "MERCHANT_READ_WRITE",
    },
    key: METAFIELD_KEY,
    name: "Validation Configuration",
    namespace: METAFIELD_NAMESPACE,
    ownerType: "VALIDATION",
    type: "json",
  };

  const query = `#graphql
    mutation CreateMetafieldDefinition($definition: MetafieldDefinitionInput!) {
      metafieldDefinitionCreate(definition: $definition) {
        createdDefinition {
            id
          }
        }
      }
  `;

  type MetafieldDefinitionCreateData = {
    metafieldDefinitionCreate: {
      createdDefinition?: {
        id: string;
      };
    };
  };

  const variables = { definition };
  const result = await adminApiQuery<MetafieldDefinitionCreateData>(query, {
    variables,
  });

  return result?.data?.metafieldDefinitionCreate?.createdDefinition;
}

function createSettings(
  products: Product[],
  configuration: Object,
): Record<string, number> {
  const settings = {};

  products.forEach(({ variants }) => {
    variants.forEach(({ id }) => {
      // Read existing product limits from metafield
      const limit = configuration[id];

      if (limit) {
        settings[id] = limit;
      }
    });
  });

  return settings;
}

{%- elsif flavor contains 'vanilla-js' -%}
import {
  extend,
  Text,
  Box,
  FunctionSettings,
  Section,
  NumberField,
  BlockStack,
  Banner,
  InlineStack,
  Image,
} from "@shopify/ui-extensions/admin";

const TARGET = "admin.settings.validation.render";

export default extend(TARGET, async (root, api) => {
  const existingDefinition = await getMetafieldDefinition(api.query);
  if (!existingDefinition) {
    // Create a metafield definition for persistence if no pre-existing definition exists
    const metafieldDefinition = await createMetafieldDefinition(api.query);

    if (!metafieldDefinition) {
      throw new Error("Failed to create metafield definition");
    }
  }

  // Read existing persisted data about product limits from the associated metafield
  const configuration = JSON.parse(
    api.data.validation?.metafields?.[0]?.value ?? "{}",
  );

  // Query product data needed to render the settings UI
  const products = await getProducts(api.query);

  renderValidationSettings(root, configuration, products, api);
});

function renderValidationSettings(root, configuration, products, api) {
  let errors = [];
  // State to keep track of product limit settings, initialized to any persisted metafield value
  let settings = createSettings(products, configuration);

  const onError = (newErrors) => {
    errors = newErrors.map((e) => e.message);
    renderContent();
  };

  const onChange = async (variant, value) => {
    errors = [];
    const newSettings = {
      ...settings,
      [variant.id]: Number(value),
    };
    settings = newSettings;

    // On input change, commit updated product variant limits to memory.
    // Caution: the changes are only persisted on save!
    const result = await api.applyMetafieldChange({
      type: "updateMetafield",
      namespace: "$app:product-limits",
      key: "product-limits-values",
      value: JSON.stringify(newSettings),
    });

    if (result.type === "error") {
      errors = [result.message];
      renderContent();
    }
  };

  const renderErrors = (errors, root) => {
    if (!errors.length) {
      return [];
    }

    return errors.map((error, i) =>
      root.createComponent(
        Banner,
        {
          title: "Errors were encountered",
          tone: "critical",
        },
        root.createComponent(Text, {}, error),
      ),
    );
  };

  const renderContent = () => {
    return root.append(
      root.createComponent(
        // Note: FunctionSettings must be rendered for the host to receive metafield updates
        FunctionSettings,
        { onError },
        ...renderErrors(errors, root),
        ...products.map((product) =>
          renderProductQuantitySettings(root, product, settings, onChange),
        ),
      ),
    );
  };

  renderContent();
}

function renderProductQuantitySettings(root, product, settings, onChange) {
  const heading = root.createComponent(
    InlineStack,
    {},
    root.createComponent(Box, { minInlineSize: "5%" }),
    root.createComponent(
      Box,
      { minInlineSize: "5%" },
      root.createComponent(Text, { fontWeight: "bold" }, "Variant Name"),
    ),
    root.createComponent(
      Box,
      { minInlineSize: "50%" },
      root.createComponent(Text, { fontWeight: "bold" }, "Limit"),
    ),
  );

  const renderVariant = (variant, settings, root) => {
    const limit = settings[variant.id];

    return root.createComponent(
      InlineStack,
      { columnGap: "none" },
      root.createComponent(
        Box,
        { minInlineSize: "5%" },
        variant.imageUrl
          ? root.createComponent(Image, {
              source: variant.imageUrl,
              alt: variant.title,
            })
          : null,
      ),
      root.createComponent(
        Box,
        { minInlineSize: "5%" },
        root.createComponent(Text, {}, variant.title),
      ),
      root.createComponent(
        Box,
        { minInlineSize: "50%" },
        root.createComponent(NumberField, {
          label: "Set a limit",
          value: limit,
          min: 0,
          max: 99,
          defaultValue: String(limit),
          onChange: (value) => onChange(variant, value),
        }),
      ),
    );
  };

  // Render table of product variants and inputs to assign limits
  return root.createComponent(
    Section,
    { heading: product.title },
    root.createComponent(
      BlockStack,
      { paddingBlock: "large" },
      heading,
      ...product.variants.map((variant) =>
        renderVariant(variant, settings, root),
      ),
    ),
  );
}

async function getProducts(adminApiQuery) {
  const query = `#graphql
  query FetchProducts {
    products(first: 5) {
      nodes {
        title
        variants(first: 5) {
          nodes {
            id
            title
            image {
              url
            }
          }
        }
      }
    }
  }`;

  const result = await adminApiQuery(query);

  return result?.data?.products.nodes.map(({ title, variants }) => {
    return {
      title,
      variants: variants.nodes.map((variant) => ({
        title: variant.title,
        id: variant.id,
        imageUrl: variant?.image?.url,
      })),
    };
  });
}

const METAFIELD_NAMESPACE = "$app:product-limits";
const METAFIELD_KEY = "product-limits-values";

async function getMetafieldDefinition(adminApiQuery) {
  const query = `#graphql
    query GetMetafieldDefinition {
      metafieldDefinitions(first: 1, ownerType: VALIDATION, namespace: "${METAFIELD_NAMESPACE}", key: "${METAFIELD_KEY}") {
        nodes {
          id
        }
      }
    }
  `;

  const result = await adminApiQuery(query);

  return result?.data?.metafieldDefinitions?.nodes[0];
}

async function createMetafieldDefinition(adminApiQuery) {
  const definition = {
    access: {
      admin: "MERCHANT_READ_WRITE",
    },
    key: METAFIELD_KEY,
    name: "Validation Configuration",
    namespace: METAFIELD_NAMESPACE,
    ownerType: "VALIDATION",
    type: "json",
  };

  const query = `#graphql
    mutation CreateMetafieldDefinition($definition: MetafieldDefinitionInput!) {
      metafieldDefinitionCreate(definition: $definition) {
        createdDefinition {
            id
          }
        }
      }
  `;

  const variables = { definition };
  const result = await adminApiQuery(query, { variables });

  return result?.data?.metafieldDefinitionCreate?.createdDefinition;
}

function createSettings(products, configuration) {
  const settings = {};

  products.forEach(({ variants }) => {
    variants.forEach(({ id }) => {
      // Read existing product limits from metafield
      const limit = configuration[id];

      if (limit) {
        settings[id] = limit;
      }
    });
  });

  return settings;
}

{%- endif -%}

{%- if flavor contains "react" -%}
import {useEffect, useState} from 'react';
import {
  reactExtension,
  useApi,
  AdminAction,
  BlockStack,
  Button,
  Text,
} from '@shopify/ui-extensions-react/admin';

// The target used here must match the target used in the extension's toml file (./shopify.extension.toml)
const TARGET = 'admin.product-details.action.render';

export default reactExtension(TARGET, () => <App />);

function App() {
  // The useApi hook provides access to several useful APIs like i18n, close, and data.
  const {extension: {target}, i18n, close, data} = useApi(TARGET);

  const [productTitle, setProductTitle] = useState('');
  // Use direct API calls to fetch data from Shopify.
  // See https://shopify.dev/docs/api/admin-graphql for more information about Shopify's GraphQL API
  useEffect(() => {
    (async function getProductInfo() {
      const getProductQuery = {
        query: `query Product($id: ID!) {
          product(id: $id) {
            title
          }
        }`,
        variables: {id: data.selected[0].id},
      };

      const res = await fetch("shopify:admin/api/graphql.json", {
        method: "POST",
        body: JSON.stringify(getProductQuery),
      });

      if (!res.ok) {
        console.error('Network error');
      }

      const productData = await res.json();
      setProductTitle(productData.data.product.title);
    })();
  }, []);
  return (
    // The AdminAction component provides an API for setting the title and actions of the Action extension wrapper.
    <AdminAction
      primaryAction={
        <Button
          onPress={() => {
            console.log('saving');
            close();
          }}
        >
          Done
        </Button>
      }
      secondaryAction={
        <Button
          onPress={() => {
            console.log('closing');
            close();
          }}
        >
          Close
        </Button>
      }
    >
      {/* Set the translation values for each supported language in the locales directory */}
      <BlockStack>
        {/* Set the translation values for each supported language in the locales directory */}
        <Text fontWeight="bold">{i18n.translate('welcome', {target})}</Text>
        <Text>Current product: {productTitle}</Text>
      </BlockStack>
    </AdminAction>
  );
}

{%- else -%}
import { extend, AdminAction, BlockStack, Button, Text } from "@shopify/ui-extensions/admin";

// The target used here must match the target used in the extension's toml file (./shopify.extension.toml)
// The second argument to the render callback provides access to several useful APIs like i18n, close, and data.
extend("admin.product-details.action.render", (root, { extension: {target}, i18n, close, data }) => {
  const productTitle = root.createText('');

  getProductInfo(data).then((title) => {
    productTitle.updateText(title);
  });

  root.appendChild(
    root.createComponent(
      // The AdminAction component provides an API for setting the title and actions of the Action extension wrapper.
      AdminAction,
      {
        primaryAction: root.createComponent(Button, {
          onPress: () => {
            console.log("saving");
            close();
          },
        }, 'Done'),
        secondaryAction: root.createComponent(Button, {
          onPress: () => {
            console.log("closing");
            close();
          },
        }, 'Close')
      },
      root.createComponent(BlockStack, null,
        // Set the translation values for each supported language in the locales directory
        root.createComponent(Text, {fontWeight: 'bold'}, i18n.translate('welcome', {target})),
        root.createComponent(Text, null, 'Current product: ', productTitle)
      )
    )
  );
});

// Use direct API calls to fetch data from Shopify.
// See https://shopify.dev/docs/api/admin-graphql for more information about Shopify's GraphQL API
async function getProductInfo(data) {
  const getProductQuery = {
    query: `query Product($id: ID!) {
      product(id: $id) {
        title
      }
    }`,
    variables: {id: data.selected[0].id},
  };

  const res = await fetch("shopify:admin/api/graphql.json", {
    method: "POST",
    body: JSON.stringify(getProductQuery),
  });

  if (!res.ok) {
    console.error('Network error');
  }

  const productData = await res.json();
  return productData.data.product.title;
};
{%- endif -%}

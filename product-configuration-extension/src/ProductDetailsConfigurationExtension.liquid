{%- if flavor contains "preact" -%}
import '@shopify/ui-extensions/preact';
import {render} from 'preact';
import {useState, useEffect} from 'preact/hooks';

export default async () => {
  render(<Extension />, document.body);
}

function Extension() {
  const {extension: {target}, i18n} = shopify;
  const product = useProduct();
  return (
    <s-stack direction="block">
      <s-text>
        {i18n.translate('welcome', {target})}
      </s-text>
      {product?.bundleComponents.map((component) =>
        <s-text key={component.id}>{component.title}</s-text>
      )}
    </s-stack>
  );
}

function useProduct() {
  const {data, query} = shopify;
  const productId = data?.selected[0].id;
  const [product, setProduct] = useState(null);

  useEffect(() => {
    query(
      `#graphql
      query GetProduct($id: ID!) {
        product(id: $id) {
          id
          title
          bundleComponents(first: 100) {
            nodes {
              componentProduct {
                id
                title
              }
            }
          }
        }
      }
      `,
      {variables: {id: productId}}
    ).then(({data, errors}) => {
      if (errors) {
        console.error(errors);
      } else {
        const {bundleComponents, ...product} = data.product;
        setProduct({
          ...product,
          bundleComponents: bundleComponents.nodes.map(({componentProduct}) => ({
            ...componentProduct
          }))
        })
      }
    })
  }, [productId, query]);

  return product;
}
{%- elsif flavor contains "react" -%}
import {
  reactExtension,
  useApi,
  BlockStack,
  Text,
} from '@shopify/ui-extensions-react/admin';
import {useState, useEffect} from 'react';

// The target used here must match the target used in the extension's toml file (./shopify.extension.toml)
export default reactExtension('admin.product-details.configuration.render', () => <App />);

function App() {
  {% if flavor contains "typescript" %}
  const {extension: {target}, i18n} = useApi<'admin.product-details.configuration.render'>();
  {% else %}
  const {extension: {target}, i18n} = useApi();
  {% endif %}
  const product = useProduct();
  return (
    <BlockStack>
      <Text>
        {i18n.translate('welcome', {target})}
      </Text>
      {product?.bundleComponents.map((component) =>
        <Text key={component.id}>{component.title}</Text>
      )}
    </BlockStack>
  );
}

function useProduct() {
  {% if flavor contains "typescript" %}
  const {data, query} = useApi<'admin.product-details.configuration.render'>();
  const productId = (data as any)?.selected[0].id;
  const [product, setProduct] = useState<{
    id: string;
    title: string;
    bundleComponents: {
      id: string;
      title: string;
    }[];
  }>(null);
  {% else %}
  const {data, query} = useApi();
  const productId = data?.selected[0].id;
  const [product, setProduct] = useState(null);
  {% endif %}

  useEffect(() => {
    query(
      `#graphql
      query GetProduct($id: ID!) {
        product(id: $id) {
          id
          title
          bundleComponents(first: 100) {
            nodes {
              componentProduct {
                id
                title
              }
            }
          }
        }
      }
      `,
      {variables: {id: productId}}
    ).then(({data, errors}) => {
      if (errors) {
        console.error(errors);
      } else {
        {% if flavor contains "typescript" %}
        const {bundleComponents, ...product} = (data as {
          product: {
            id: string;
            title: string;
            bundleComponents: {
              nodes: {
                componentProduct: {
                  id: string;
                  title: string;
                }
              }[]
            }
          }
        }).product;
        {% else %}
        const {bundleComponents, ...product} = data.product;
        {% endif %}
        setProduct({
          ...product,
          bundleComponents: bundleComponents.nodes.map(({componentProduct}) => ({
            ...componentProduct
          }))
        })
      }
    })
  }, [productId, query]);

  return product;
}

{%- else -%}
import {
  extension,
  StandardApi,
  BlockStack,
  Text
} from "@shopify/ui-extensions/admin";

export default extension("admin.product-details.configuration.render", async (root, { extension: {target}, data, i18n, query }) => {
  {% if flavor contains "typescript" %}
  const productId = (data as any)?.selected[0].id;
  {% else %}
  const productId = data?.selected[0].id;
  {% endif %}
  const product = await fetchProduct(productId, query);

  root.append(
    root.createComponent(
      BlockStack,
      {},
      root.createComponent(
        Text,
        {},
        i18n.translate('welcome', {target}),
        ...product?.bundleComponents.map((component) =>
          root.createComponent(
            Text,
            {},
            component.title
          ),
        ),
      ),
    ),
  );
});

{% if flavor contains "typescript" %}
async function fetchProduct(
  productId: string,
  query: StandardApi<any>['query'],
): Promise<{
  id: string;
  title: string;
  bundleComponents: {
    id: string;
    title: string;
  }[];
} | null> {
{% else %}
async function fetchProduct(productId, query) {
{% endif %}
  const {data, errors} = await query(
    `#graphql
    query GetProduct($id: ID!) {
      product(id: $id) {
        id
        title
        bundleComponents(first: 100) {
          nodes {
            componentProduct {
              id
              title
            }
          }
        }
      }
    }
    `,
    {variables: {id: productId}}
  );

  if (errors) {
    console.error(errors);
    return null;
  }

  {% if flavor contains "typescript" %}
  const {bundleComponents, ...product} = (data as {
    product: {
      id: string;
      title: string;
      bundleComponents: {
        nodes: {
          componentProduct: {
            id: string;
            title: string;
          }
        }[]
      }
    }
  }).product;
  {% else %}
  const {bundleComponents, ...product} = data.product;
  {% endif %}
  return {
    ...product,
    bundleComponents: bundleComponents.nodes.map(({componentProduct}) => ({
      ...componentProduct
    }))
  };
}
{%- endif -%}
